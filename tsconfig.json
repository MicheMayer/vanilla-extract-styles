{
    "$schema": "https://json.schemastore.org/tsconfig",
    "compilerOptions": {
        "baseUrl": "lib",
        "paths": {
            "@contracts/*": [
                "contracts/*"
            ],
            "@global/*": [
                "global/*"
            ],
            "@properties/*": [
                "properties/*"
            ],
            "@customtypes": [
                "types/index.ts"
            ],
        },
        "outDir": "dist",
        // Enable strict mode. This enables a few options at a time, see https://www.typescriptlang.org/tsconfig#strict for a list.
        "strict": true,
        // Enable top-level await, and other modern ESM features.
        "target": "ESNext",
        "module": "ESNext",
        // Enable module resolution without file extensions on relative paths, for things like npm package imports.
        "moduleResolution": "Bundler",
        // Allow importing TypeScript files using their native extension (.ts(x)).
        "allowImportingTsExtensions": false,
        // Enable JSON imports.
        "resolveJsonModule": true,
        // Enforce the usage of type-only imports when needed, which helps avoiding bundling issues.
        "verbatimModuleSyntax": true,
        // Ensure that each file can be transpiled without relying on other imports.
        // This is redundant with the previous option, however it ensures that it's on even if someone disable `verbatimModuleSyntax`
        "isolatedModules": true,
        // emit source maps
        "noEmit": false,
        // emit type declarations
        "declaration": true,
        // Report an error when importing a file using a casing different from another import of the same file.
        "forceConsistentCasingInFileNames": true,
        // Properly support importing CJS modules in ESM
        "esModuleInterop": true,
        // Skip typechecking libraries and .d.ts files
        "skipLibCheck": true,
    }
}